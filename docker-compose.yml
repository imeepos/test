services:
  # Infrastructure Services
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: sker_db
      POSTGRES_USER: sker_user
      POSTGRES_PASSWORD: sker_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./packages/store/src/migrations:/docker-entrypoint-initdb.d
    networks:
      - sker-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sker_user -d sker_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - sker-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    command: redis-server --appendonly yes

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: sker_user
      RABBITMQ_DEFAULT_PASS: sker_password
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - sker-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  mongodb:
    image: mongo:7-jammy
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER:-sker_user}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-sker_password}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-sker_db}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - sker-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: mongod --auth

  minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-sker_admin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-sker_password_2024}
      MINIO_DOMAIN: ${MINIO_DOMAIN:-minio}
      MINIO_BROWSER_REDIRECT_URL: ${MINIO_BROWSER_REDIRECT_URL:-http://localhost:9001}
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    volumes:
      - minio_data:/data
    networks:
      - sker-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5
    command: server /data --console-address ":9001"

  # Application Services
  store:
    build:
      context: .
      dockerfile: packages/store/Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://sker_user:sker_password@postgres:5432/sker_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-sker-development-jwt-secret-key-2024}
      # 数据库配置
      - PG_HOST=postgres
      - PG_PORT=5432
      - PG_DATABASE=sker_db
      - PG_USER=sker_user
      - PG_PASSWORD=sker_password
      - PG_SSL=false
      # Redis 配置
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_DB=${REDIS_DB:-0}
      # 缓存配置
      - CACHE_TTL=${CACHE_TTL:-3600}
      - CACHE_MAX_KEYS=${CACHE_MAX_KEYS:-10000}
      # OpenAI 配置
      - OPENAI_API_KEY=${OPENAI_API_KEY:-sk-ae5d479531684e3081dad2ba4800cf26}
      # 消息队列配置
      - RABBITMQ_URL=amqp://sker_user:sker_password@rabbitmq:5672
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sker-network
    volumes:
      - ./packages/store/.env:/app/packages/store/.env:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      start_period: 60s
      retries: 3
    restart: unless-stopped

  broker:
    build:
      context: .
      dockerfile: packages/broker/Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3002
      - RABBITMQ_URL=amqp://sker_user:sker_password@rabbitmq:5672
      - JWT_SECRET=${JWT_SECRET:-sker-development-jwt-secret-key-2024}
      # 数据库配置 (如果 Broker 需要数据库访问)
      - PG_HOST=postgres
      - PG_PORT=5432
      - PG_DATABASE=sker_db
      - PG_USER=sker_user
      - PG_PASSWORD=sker_password
      - PG_SSL=false
      # Redis 配置 (用于缓存和队列)
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_DB=${REDIS_DB:-1}
      # AI 相关配置
      - OPENAI_API_KEY=${OPENAI_API_KEY:-sk-ae5d479531684e3081dad2ba4800cf26}
      # 服务间通信配置
      - STORE_SERVICE_URL=http://store:3001
      - ENGINE_SERVICE_URL=http://engine:8001
      # 健康检查配置
      - ENABLE_HTTP_HEALTH_CHECK=true
      - HEALTH_CHECK_PORT=3002
    ports:
      - "3002:3002"
    depends_on:
      rabbitmq:
        condition: service_healthy
      store:
        condition: service_healthy
    networks:
      - sker-network
    volumes:
      - ./packages/broker/.env:/app/packages/broker/.env:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      start_period: 60s
      retries: 3
    restart: unless-stopped

  engine:
    build:
      context: .
      dockerfile: packages/engine/Dockerfile
    environment:
      - NODE_ENV=production
      - OPENAI_API_KEY=${OPENAI_API_KEY:-sk-ae5d479531684e3081dad2ba4800cf26}
      - RABBITMQ_URL=amqp://sker_user:sker_password@rabbitmq:5672
      - STUDIO_API_PORT=8001
      - STUDIO_API_HOST=0.0.0.0
      - JWT_SECRET=${JWT_SECRET:-sker-development-jwt-secret-key-2024}
      # Database 配置
      - PG_HOST=postgres
      - PG_PORT=5432
      - PG_DATABASE=sker_db
      - PG_USER=sker_user
      - PG_PASSWORD=sker_password
      - PG_SSL=false
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_DB=${REDIS_DB:-2}
      # OpenAI 配置
      - USE_CUSTOM_PROVIDER=${USE_CUSTOM_PROVIDER:-true}
      - OPENAI_BASE_URL=${OPENAI_BASE_URL:-https://api.deepseek.com}
      - OPENAI_DEFAULT_MODEL=${OPENAI_DEFAULT_MODEL:-deepseek-chat}
      - OPENAI_TIMEOUT=${OPENAI_TIMEOUT:-30000}
      - OPENAI_MAX_RETRIES=${OPENAI_MAX_RETRIES:-3}
      # CORS 配置
      - STUDIO_CORS_ORIGIN=${STUDIO_CORS_ORIGIN:-http://localhost:3000,http://localhost:5173,http://localhost:8080}
      # 限流配置
      - API_RATE_LIMIT_WINDOW=${API_RATE_LIMIT_WINDOW:-900000}
      - API_RATE_LIMIT_MAX=${API_RATE_LIMIT_MAX:-100}
      - API_TIMEOUT=${API_TIMEOUT:-120000}
    ports:
      - "8001:8001"
    depends_on:
      broker:
        condition: service_started
    networks:
      - sker-network
    volumes:
      - ./packages/engine/.env:/app/packages/engine/.env:ro
    restart: unless-stopped

  gateway:
    build:
      context: .
      dockerfile: packages/gateway/Dockerfile
    environment:
      - NODE_ENV=development
      - PORT=8000
      # 服务间通信配置
      - STORE_SERVICE_URL=http://store:3001
      - BROKER_SERVICE_URL=http://broker:3002
      - ENGINE_SERVICE_URL=http://engine:8001
      # RabbitMQ 配置 - 临时禁用以解决启动问题
      # - RABBITMQ_URL=amqp://sker_user:sker_password@rabbitmq:5672
      # 认证配置
      - JWT_SECRET=${JWT_SECRET:-sker-development-jwt-secret-key-2024}
      # 数据库配置 (如果 Gateway 需要直接数据库访问)
      - PG_HOST=postgres
      - PG_PORT=5432
      - PG_DATABASE=sker_db
      - PG_USER=sker_user
      - PG_PASSWORD=sker_password
      - PG_SSL=false
      # Redis 配置 (用于会话管理等)
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_DB=${REDIS_DB:-2}
      # AI 相关配置
      - OPENAI_API_KEY=${OPENAI_API_KEY:-sk-ae5d479531684e3081dad2ba4800cf26}
      # CORS 配置
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://localhost:5173,http://localhost:8080}
      # 限流配置
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-900000}
      - RATE_LIMIT_MAX=${RATE_LIMIT_MAX:-100}
    ports:
      - "8000:8000"
    depends_on:
      store:
        condition: service_healthy
      broker:
        condition: service_started
      engine:
        condition: service_started
    networks:
      - sker-network
    volumes:
      - ./packages/gateway/.env:/app/packages/gateway/.env:ro
    restart: unless-stopped

  # Frontend Applications
  studio:
    build:
      context: .
      dockerfile: apps/studio/Dockerfile
    environment:
      - NODE_ENV=production
      # API 配置
      - API_BASE_URL=http://gateway:8000
      - WS_BASE_URL=ws://gateway:8000
      # CORS 配置
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://localhost:5173,http://localhost:8080}
    ports:
      - "3000:80"
    depends_on:
      gateway:
        condition: service_started
    networks:
      - sker-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      start_period: 30s
      retries: 3
    restart: unless-stopped

networks:
  sker-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  mongodb_data:
  mongodb_config:
  minio_data: